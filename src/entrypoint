#!/usr/bin/python3

# standard libraries
import os
import pandas as pd
import sys
from threading import Thread
import yfinance as yf

# custom modules
from metrics import Metrics

# environment variables and defaults
EARNINGS_YIELD_THRESHOLD = os.environ.get('EARNINGS_YIELD_THRESHOLD', 0.08)
RETURN_ON_ASSETS_THRESHOLD = os.environ.get('RETURN_ON_ASSETS_THRESHOLD', 0.1)
EQUITY_TO_DEBT_THRESHOLD = os.environ.get('EQUITY_TO_DEBT_THRESHOLD', 1)
FREE_CASH_FLOW_THRESHOLD = os.environ.get('FREE_CASH_FLOW_THRESHOLD', 1)


def run(infile, attrs):
    """
    Does the actual processing of the data
    """
    snp = pd.read_csv(infile)

    tickers = list(snp.to_dict()['Symbol'].values())

    for i in range(0, len(tickers)):

        # grab the desired stock attributes
        symbol = yf.Ticker(tickers[i])
        ey = attrs.earnings_yield(symbol)
        roc = attrs.return_on_capital(symbol)
        roa = attrs.return_on_assets(symbol)
        eqd = attrs.equity_to_debt_ratio(symbol)
        fcf = attrs.free_cash_flow(symbol)
        mce = attrs.market_cap_to_equity(symbol)
        nn = attrs.net_net(symbol)

        # filter the values against pre-set thresholds
        if ey < EARNINGS_YIELD_THRESHOLD:
            print('[-] EY TOO LOW')
            ey = 0

        if roa < RETURN_ON_ASSETS_THRESHOLD:
            print('[-] ROA TOO LOW')
            roa = 0

        if eqd < EQUITY_TO_DEBT_THRESHOLD:
            print('[-] DE TOO HIGH')
            eqd = 0

        if fcf == FREE_CASH_FLOW_THRESHOLD:
            print('[-] NEGATIVE FCF')

        # input scores into spreadsheet
        snp.loc[i, 'ebit / ev'] = ey
        snp.loc[i, 'roa'] = roa
        snp.loc[i, 'equity / debt'] = eqd
        snp.loc[i, 'market cap / equity'] = mce
        snp.loc[i, 'net-net'] = nn

        snp.to_csv(infile, index=False)


def main():
    """
    Get the source CSV file
    The source file has tickers for all relevant stocks \
            pre-configured in the 'Symbol' column
    For each ticker symbol, retrieve all of the desired \
            business attributes, and push them to the \
            CSV.
    """

    files = ["data/sp500.csv", "data/ndaq.csv", "data/cheap.csv"]
    attrs = Metrics()

    for infile in files:
        value_read = Thread(target=run, args=(infile,attrs,))
        value_read.start()


if __name__ == "__main__":
    main()
